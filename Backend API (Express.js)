const express = require('express');
const csv = require('csv-parser');
const fs = require('fs');
const app = express();

// Middleware to parse JSON and URL-encoded data
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Example model (you can replace this with actual DB queries if needed)
const Product = {
  // Mock function to fetch a product by ID
  findById: (id) => {
    return new Promise((resolve, reject) => {
      // Simulate a product search by ID
      resolve({ id, name: `Product ${id}`, price: 100, location: "Sample Location", latLong: { lat: 12.34, long: 56.78 } });
    });
  },
};

// Function to read and combine data from both CSV files
const readCSV = (filePath) => {
  return new Promise((resolve, reject) => {
    const products = [];
    fs.createReadStream(filePath)
      .pipe(csv())
      .on('data', (row) => {
        products.push(row);
      })
      .on('end', () => {
        resolve(products);
      })
      .on('error', (err) => {
        reject(err);
      });
  });
};

// Route to fetch combined products
app.get('/products', async (req, res) => {
  try {
    const productsData1 = await readCSV('path_to_products.csv');
    const productsData2 = await readCSV('path_to_combined_products.csv');

    const combinedProducts = [...productsData1, ...productsData2]; // Combining both CSV data
    res.render('products', { products: combinedProducts });
  } catch (err) {
    res.status(500).send('Error reading CSV files');
  }
});

// Route to fetch product details
app.get('/api/products/:id', async (req, res) => {
  try {
    const productId = req.params.id;
    const product = await Product.findById(productId);

    if (!product) return res.status(404).json({ error: "Product not found" });

    res.json(product);
  } catch (error) {
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// Starting the server
app.listen(3000, () => {
  console.log('Server running on port 3000');
});
