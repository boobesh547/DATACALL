const express = require('express');
const fs = require('fs');
const path = require('path');
const app = express();
const port = 3000;

// Middleware to parse JSON bodies
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Serve static files like stylesheets or scripts (optional)
app.use(express.static('public'));

// Utility function to read and parse CSV data
function parseCSV(filePath) {
    return new Promise((resolve, reject) => {
        fs.readFile(filePath, 'utf8', (err, data) => {
            if (err) {
                return reject(new Error('Failed to read CSV file'));
            }

            const rows = data.split('\n').slice(1); // Skip the header row
            const products = rows.map(row => {
                const columns = row.split(',');
                return {
                    id: columns[0].trim(),
                    name: columns[1].trim(),
                    price: columns[2].trim(),
                    userId: columns[3].trim(),
                    categoryId: columns[4].trim(),
                    location: columns[5] ? columns[5].trim() : null,
                    latLong: columns[6] ? {
                        lat: parseFloat(columns[6].split(' ')[0]),
                        long: parseFloat(columns[6].split(' ')[1])
                    } : null,
                };
            });

            resolve(products);
        });
    });
}

// Route to fetch all products from both CSV files
app.get('/products', async (req, res) => {
    try {
        // Load products from both CSV files
        const products1 = await parseCSV(path.join(__dirname, 'products.csv'));
        const products2 = await parseCSV(path.join(__dirname, 'combined_products.csv'));

        // Combine both product arrays
        const allProducts = [...products1, ...products2];

        // Render the products in the EJS view
        res.render('products', { products: allProducts });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Route to fetch a single product by ID from both CSV files
app.get('/api/products/:id', async (req, res) => {
    const productId = req.params.id;

    try {
        // Load products from both CSV files
        const products1 = await parseCSV(path.join(__dirname, 'products.csv'));
        const products2 = await parseCSV(path.join(__dirname, 'combined_products.csv'));

        // Combine both product arrays
        const allProducts = [...products1, ...products2];

        // Find the product by ID
        const product = allProducts.find(p => p.id === productId);

        if (!product) {
            return res.status(404).json({ error: 'Product not found' });
        }

        res.json(product);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Route to serve the product creation form (Optional)
app.get('/create_product', (req, res) => {
    res.render('create_product');
});

// Route to handle product creation (Optional)
app.post('/create_product', (req, res) => {
    const { name, price, userId, categoryId, location, lat, lon } = req.body;

    // Add new product to both CSV files
    const newProduct = {
        id: Date.now(), // Use a timestamp as an ID
        name,
        price,
        userId,
        categoryId,
        location,
        latLong: `${lat} ${lon}`
    };

    // Function to append to a CSV file
    function appendToCSV(filePath, product) {
        return new Promise((resolve, reject) => {
            fs.readFile(filePath, 'utf8', (err, data) => {
                if (err) return reject(new Error('Failed to read CSV file'));

                const rows = data.split('\n');
                rows.push(`${newProduct.id},${newProduct.name},${newProduct.price},${newProduct.userId},${newProduct.categoryId},${newProduct.location},${newProduct.latLong}`);
                const updatedData = rows.join('\n');

                fs.writeFile(filePath, updatedData, 'utf8', (err) => {
                    if (err) return reject(new Error('Failed to save product'));
                    resolve();
                });
            });
        });
    }

    // Append the new product to both files
    Promise.all([
        appendToCSV(path.join(__dirname, 'products.csv'), newProduct),
        appendToCSV(path.join(__dirname, 'combined_products.csv'), newProduct),
    ])
        .then(() => {
            res.redirect('/products');
        })
        .catch(error => {
            res.status(500).json({ error: error.message });
        });
});

// Set the view engine to EJS
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Start the server
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
